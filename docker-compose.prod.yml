version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legal-aid-backend-prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./legal_aid.db}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
      - USE_LOCAL_LLM=${USE_LOCAL_LLM:-false}
      - LOCAL_LLM_URL=${LOCAL_LLM_URL:-}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - DEFAULT_JURISDICTION=${DEFAULT_JURISDICTION:-US}
    volumes:
      - backend_documents:/app/generated_documents
      - backend_db:/app/db
    networks:
      - legal-aid-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend/legal-aid-frontend
      dockerfile: Dockerfile
    container_name: legal-aid-frontend-prod
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - legal-aid-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse proxy for production (optional)
  nginx-proxy:
    image: nginx:alpine
    container_name: legal-aid-proxy
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - legal-aid-network
    restart: always
    profiles:
      - production

networks:
  legal-aid-network:
    driver: bridge

volumes:
  backend_documents:
    driver: local
  backend_db:
    driver: local

